1) //creating ui using react
create folder
open it in vs code
npx create-react-app project_name     //initialise react app
cd project_name
npm start

2) clean the files i.e. delete files & unnecessary code

in public keep only index.html
in src keep app.css app.js index.css index.js and remove unnecessary code from them

3) create components login,register,home
in src folder create three folders
in each folder create .js and .css files 
e.g. login.js login.css

4) //boiler plate in .js

import React from "react"
import "./homepage.css"

const Homepage = () => {
    return (
        <div>Homepage</div>
    )
}

export default Homepage


5) //import above files in App.js
e.g. import Homepage from "./components/homepage/homepage"
&
in div "App"
<Homepage/>

6) App.css by default do styling

.App {
    display: flex;
    width: 100vw;
    height: 100vh;
    justify-content: center;
    align-items: center;
    background: #f0f2f5;
    font-family: Arial, sans-serif;
}

7) Edit homepage.js & its css

8) Edit login.js & its css

9) Edit register.js & its css

10) In register import {useState} from react which will help to store values of inputs

    i) Create an object user using useState which will update the values of name,email, password in inputs
    ii) add variables in inputs anf function call onChange
      i.e. name="name" value={user.name}  onChange={handleChange}
           name="email" value={user.email} onChange={handleChange}
    iii) declare handleChange function

        const [ user, setUser] = useState({
        name: "",
        email:"",
        password:"",
        reEnterPassword: ""
    })

    const handleChange = e => {
        const { name, value } = e.target
        setUser({
            ...user,
            [name]: value
        })
    }

11) Do the same in login

12) Here, we complete our UI of login and register

13) //Backend of our project
    Create another folder for backend
    open folder in vs code
    npm init //initialisation
    package.json will be created
    create index.js as our main file

14) Next step is to import libraries needed i.e. express, mongoose, cors etc
    We can do it using
    const express = require("express");

    We can do it in another way like react
    import express from "express"
    to do this just go to package.json and add "type": "module"

    install using
    npm i express cors mongoose

15) Do the required configurations 

    const app = express()
    app.use(express.json())
    app.use(express.urlencoded())
    app.use(cors())

16) Creating database

mongoose.connect('mongodb://localhost:27017/myLoginRegisterDB', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}, () => {
    console.log("DB Connected")
})

//myapp is name of database we do change it

   for url go on internet

or in mongodbAtlas

mongoose.connect('mongodb+srv://jivan:raje123@nodeexpressprojects.fm9j6iw.mongodb.net/myLoginRegisterDatabase?retryWrites=true&w=majority', {
    useNewUrlParser: true,
    useCreateIndex: true,
    useFindAndModify: false,
    useUnifiedTopology: true,
}, () => {
    console.log("DB Connected")
})

17) Defining Route

app.get("/",(req,res)=>{
    res.send("My API")
})

do for post

18) Creating schema for user

const userSchema = new mongoose.Schema({
    name: String,
    email: String,
    password: String
})

19) Create model 

const User = new mongoose.model("User",userSchema)

20) //Going to frontend react and setting up api

Open the react folder
go to register.js file in components

21) We trigger onClick(register) event on clicking register button
    create register function

22) install and import axios
    then in register() function
     axios.post("urlwheretosend",objecttobesend)

23) we will check there is name, email & more in register function

24) axios is promise based http request it return response so use .then method
   
    const register = () => {
        const { name, email, password, reEnterPassword } = user
        if(name && email && password && (password === reEnterPassword)){
            axios.post("http://localhost:9002/register",user)
            .then( res => console.log(res))
        }
        else{
            alert("Invalid Input")
        }
        
    }

25) So we have done with register frontend and values are send to the backend so lets go there

26) In index.js
    in request app.post we fetch those values from req.body
    we put these values in mongodb by creating User object

app.post("/register",(req,res)=>{
    // console.log(req.body)
    const { name, email, password } = req.body
    
    user.findOne({email: email}, (err, user) => {
        if(user){
            res.send({message: "User Already registered"});
        }
        else{
            const user = new User({
                name,
                email,
                password
            })
            user.save( err => {
                if(err) {
                    res.send(err)
                }
                else {
                    res.send( { message: "Successfully Registered!"})
                }
            })
        }
    })
})   


27) To check if user is regisrtering twice we will use mongoose findone method 
before creating user as we done above

28) We have integrated register with backend

29) Now doing backend for login

app.post("/login",(req,res)=>{
    const {email, password } = req.body
    User.findOne({email: email}, (err, user) => {
        if(user){
             if(password === user.password ){
                res.send({message: "Login Successful",user: user})
             }
             else{
                res.send({message: "Password didn't match"})
             }
        }
        else
        {
            res.send({message: "User not registered"})
        }
    })
})


30) Its done now, lets provide route the pages
     For this install package in react folder
    npm install react-router-dom@5.2.0  this version for Switch

31) Put import {BrowserRouter as Router, Switch, Route } from "react-router-dom"
   in app.js

32) Implement routes as
    <Router>
        <Switch>
          <Route exact path="/"><Homepage /></Route>
          <Route path="/login"><Login /></Route>
          <Route path="/register"><Register /></Route>
        </Switch>
      </Router>

33) On clicking buttons like login, we should redirect to that page
    react-router-dom uses useHistory for that

    So, in page where buttons are e.g. login.js
    import { useHistory } from "react-router-dom"

    create instance 
    constant history = useHistory()

    and callback function where button is
    onClick={()=> history.push("/register")}

34) Similar for other buttons

35) Now we need to redirect ourselves to home page after successful login

36) In App.js
    import { useState } from 'react';
   get user by 
   const [user,setLoginUser] = useState({})
 
   here setLoginUser is props we send user to login page as in route below

   then in route use conditional routing using javascript in {}
    
   <Route exact path="/">
            {
              user && user._id
              ?
              <Homepage />
              :
              <Login setLoginUser={setLoginUser}/>
            }
    </Route>
    <Route path="/login">
            <Login setLoginUser={setLoginUser}/>
         </Route>

37) In backend after successful login we are sending alert and user
    get this data in function as
   const Login = ({setLoginUser}) => {
    

    //and in login function
     const login = () => {
        const {email, password} = user
        if(email && password){
            axios.post("http://localhost:9002/login",user)
            .then( res => {
                alert(res.data.message)
                setLoginUser(res.data.user)
                history.push("/")
            })
        }
        else{
            alert("Invalid Input")
        }
    }

 }
    
38) Do same for logout button by emptying setLoginUser({})

39) here we are done with complete login and registration

40) Thank you            

